@page "/"
@using System.Net.Http.Json

@using Data
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.Extensions.Options

@using OllamaSharp
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
﻿@using Markdig

@inject MarkdownPipeline pipeline
@inject IOllamaApiClient OllamaApiClient
@inject IOptions<OllamaApiSettings> _ollamaApiSettings

@attribute [RequireAntiforgeryToken]

@rendermode InteractiveServer

<PageTitle>Ask AI</PageTitle>

<style>
    body {
        background-color: #1a1a1a;
        color: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .chat-window {
        background-color: #2c2c2c;
        padding: 15px;
        border-radius: 10px;
        max-height: 60vh;
        overflow-y: auto;
        color: #f8f9fa;
        margin-top: 20px;
    }

    .input-group {
        display: flex;
        align-items: center;
        width: 100%;
    }

        .input-group textarea {
            flex: 1;
            margin-right: 10px;
            background-color: #333;
            color: #f8f9fa;
            border: 1px solid #555;
            border-radius: 5px;
            padding: 10px;
            font-size: 1rem;
        }

        .input-group button {
            flex-shrink: 0;
            background-color: #007bff;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            color: #f8f9fa;
            cursor: pointer;
        }

    select {
        background-color: #333;
        color: #f8f9fa;
        border: 1px solid #555;
        border-radius: 5px;
        padding: 5px 10px;
        width: 100%;
        margin-bottom: 15px;
    }

    h1 {
        color: #f8f9fa;
    }

    .submit-btn {
        background-color: #007bff;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        color: #f8f9fa;
        cursor: pointer;
        width: 15%;
    }

        .submit-btn:hover {
            background-color: #0056b3;
        }
</style>

<div class="text-center w-100">
    <h1>Ask AI</h1>
</div>

@if (messages.Any())
{
    <div class="d-flex flex-column flex-grow w-100">
        <div class="chat-window">
            @foreach (var message in messages)
            {
                <div class="p-2 mb-2 border-bottom">
                    <span>@((MarkupString)message)</span>
                </div>
            }
        </div>
    </div>
}

<div class="d-flex flex-column h-100 justify-content-center align-items-center mt-3">
    <div class="sticky-top w-100">
        <select @bind="OllamaApiClient.SelectedModel">
            <option value="" disabled>Select a model</option>
            @foreach (var model in AllModels)
            {
                <option value="@model">@model</option>
            }
        </select>
        <div class="d-block p-2">
            <EditForm Model="userInput" OnSubmit="SendMessage">
                <div class="input-group mb-3">
                    <textarea class="form-control" placeholder="Ask AI..." @bind="userInput"></textarea>
                    <button type="submit" class="submit-btn">Submit</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {
    private string userInput = "";
    private List<MarkupString> messages = new List<MarkupString>();
    private ConversationContext? context = null;

    private string SelectedModel { get; set; } = "";
    private List<string> AllModels = new();

    public async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
        {
            // Add user message
            messages.Add(new MarkupString($"<strong>User:</strong> {Markdown.ToHtml(userInput, pipeline)}"));

            // Add initial AI response placeholder
            var aiResponse = "AI: ";
            var markupResponse = new MarkupString(Markdown.ToHtml(aiResponse, pipeline));
            messages.Add(markupResponse);
            StateHasChanged();

            // Process AI response and update chat
            context = await OllamaApiClient.StreamCompletion(userInput, context, stream =>
            {
                aiResponse += stream.Response;
                var formattedResponse = Markdown.ToHtml(aiResponse, pipeline);
                messages[messages.Count - 1] = new MarkupString(formattedResponse);

                if (stream.Done)
                {
                    userInput = "";
                }

                StateHasChanged();
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Get default model from settings
        SelectedModel = _ollamaApiSettings.Value.LLMModel;
        AllModels = (await OllamaApiClient.ListLocalModels()).Select(x => x.Name).ToList();
    }
}
