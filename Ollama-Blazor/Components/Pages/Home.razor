@page "/"
@using System.Net.Http.Json

@using Data
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.Extensions.Options

@using OllamaSharp
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
﻿@using Markdig

@inject MarkdownPipeline pipeline
@inject IOllamaApiClient OllamaApiClient
@inject IOptions<OllamaApiSettings> _ollamaApiSettings

@attribute [RequireAntiforgeryToken]

@rendermode InteractiveServer

<PageTitle>Ask AI</PageTitle>

<style>
    .input-group {
        display: flex;
        align-items: center;
        width: 100%;
    }

        .input-group textarea {
            flex: 1;
            margin-right: 10px;
        }

        .input-group button {
            flex-shrink: 0;
        }
</style>

<div class="text-center w-100">
    <h1>Ask AI</h1>
</div>

<div class="d-flex flex-column flex-grow mt-3 overflow-auto w-100">
    <div class="chat-window">
        @foreach (var message in messages)
        {
            <div class="p-3">
                <span>@((MarkupString)message)</span>
            </div>
        }
    </div>
</div>

<div class="d-flex flex-column h-100 justify-content-center align-items-center">
    <div class="sticky-top w-100">
        <select @bind="OllamaApiClient.SelectedModel">
            <option value="" disabled>Select a model</option>
            @foreach (var model in AllModels)
            {
                <option value="@model">@model</option>
            }
        </select>
        <div class="d-block p-1">
            <div class="bg-dark w-100 px-3">
                <EditForm Model="userInput" OnSubmit="SendMessage">
                    <div class="row">
                        <div class="col-12">
                            <textarea class="form-control w-100 m-2" placeholder="Ask AI..." @bind="userInput"></textarea>
                        </div>
                    </div>
                    <div class="row justify-content-md-right">
                        <div class="col-11"></div>
                        <div class="col-1">
                            <button type="submit" class="btn btn-primary m-1">Submit</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private string userInput = "";
    private List<string> messages = new List<string>();
    private ConversationContext? context = null;

    private string SelectedModel { get; set; } = "";
    private List<string> AllModels = new();

    public async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
        {
            messages.Add($"User: {userInput} \n");
            var newResponse = "AI: ";
            messages.Add(newResponse);
            StateHasChanged();

            // Keep reusing the context to keep the chat topic going
            context = await OllamaApiClient.StreamCompletion(userInput, context, stream =>
            {
                userInput = string.Empty;
                newResponse += stream.Response;
                messages[messages.Count - 1] = Markdown.ToHtml(newResponse, pipeline);
                if (stream.Done)
                {
                    userInput = "";
                }
                StateHasChanged();
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Get default model from settings
        SelectedModel = _ollamaApiSettings.Value.LLMModel;
        AllModels = (await OllamaApiClient.ListLocalModels()).Select(x => x.Name).ToList();
    }
}
